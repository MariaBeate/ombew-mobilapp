{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\React-Fitness-Mobil\\\\FitnessAppMobil\\\\screens\\\\Fitnessplan.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Agenda } from \"react-native-calendars\";\n\nvar Fitnessplan = function (_Component) {\n  _inherits(Fitnessplan, _Component);\n\n  var _super = _createSuper(Fitnessplan);\n\n  function Fitnessplan(props) {\n    var _this;\n\n    _classCallCheck(this, Fitnessplan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: [],\n      date: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Fitnessplan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://192.168.178.23:9000/api/fitnessevents\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          items: data\n        });\n      }).catch(function (error) {\n        throw error;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Agenda, {\n        items: {\n          \"2020-09-05\": [{\n            name: \"item 1 - any js object\"\n          }],\n          \"2020-09-06\": [{\n            name: \"item 2 - any js object\",\n            height: 80\n          }],\n          \"2020-09-07\": [],\n          \"2020-09-08\": [{\n            name: \"item 3 - any js object\"\n          }, {\n            name: \"any js object\"\n          }]\n        },\n        items: this.state.items.map(function (item) {\n          return _this3.setState({\n            date: item.date\n          }), name = item.name;\n        }),\n        loadItemsForMonth: this.loadItems.bind(this),\n        selected: \"2020-09-04\",\n        renderItem: this.renderItem.bind(this),\n        renderEmptyDate: this.renderEmptyDate.bind(this),\n        rowHasChanged: this.rowHasChanged.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(day) {\n      var _this4 = this;\n\n      setTimeout(function () {\n        for (var i = -15; i < 10; i++) {\n          var time = day.timestamp + i * 24 * 60 * 60 * 1000;\n\n          var strTime = _this4.timeToString(time);\n\n          if (!_this4.state.items[strTime]) {\n            _this4.state.items[strTime] = [];\n            var numItems = Math.floor(Math.random() * 5);\n\n            for (var j = 0; j < numItems; j++) {\n              _this4.state.items[strTime].push({\n                name: \"Item for \" + strTime,\n                height: Math.max(50, Math.floor(Math.random() * 150))\n              });\n            }\n          }\n        }\n\n        var newItems = [];\n        Object.keys(_this4.state.items).forEach(function (key) {\n          newItems[key] = _this4.state.items[key];\n        });\n\n        _this4.setState({\n          items: newItems\n        });\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return React.createElement(View, {\n        style: [styles.item, {\n          height: item.height\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, this.state.items.map(function (item) {\n        return React.createElement(Text, {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }\n        }, item.name);\n      }));\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return React.createElement(View, {\n        style: styles.emptyDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, \"This is empty date!\"));\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }, {\n    key: \"timeToString\",\n    value: function timeToString(time) {\n      var date = new Date(time);\n      return date.toISOString().split(\"T\")[0];\n    }\n  }]);\n\n  return Fitnessplan;\n}(Component);\n\nexport { Fitnessplan as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    borderRadius: 5,\n    padding: 10,\n    marginRight: 10,\n    marginTop: 17\n  },\n  emptyDate: {\n    height: 15,\n    flex: 1,\n    paddingTop: 30\n  }\n});","map":{"version":3,"sources":["C:/Desktop/React-Fitness-Mobil/FitnessAppMobil/screens/Fitnessplan.js"],"names":["React","Component","Agenda","Fitnessplan","props","state","items","date","fetch","then","response","json","data","setState","catch","error","name","height","map","item","loadItems","bind","renderItem","renderEmptyDate","rowHasChanged","day","setTimeout","i","time","timestamp","strTime","timeToString","numItems","Math","floor","random","j","push","max","newItems","Object","keys","forEach","key","styles","id","emptyDate","r1","r2","Date","toISOString","split","StyleSheet","create","backgroundColor","flex","borderRadius","padding","marginRight","marginTop","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Text, View, StyleSheet } from \"react-native\";\r\nimport { Agenda } from \"react-native-calendars\";\r\n\r\nexport default class Fitnessplan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      date: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // fetch(\"http://192.168.0.176:9000/api/fitness\")\r\n    //fetch(\"http://192.168.178.23:9000/api/fitness\")\r\n    fetch(\"http://192.168.178.23:9000/api/fitnessevents\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ items: data });\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <Agenda\r\n        items={{\r\n          \"2020-09-05\": [{ name: \"item 1 - any js object\" }],\r\n          \"2020-09-06\": [{ name: \"item 2 - any js object\", height: 80 }],\r\n          \"2020-09-07\": [],\r\n          \"2020-09-08\": [\r\n            { name: \"item 3 - any js object\" },\r\n            { name: \"any js object\" },\r\n          ],\r\n        }}\r\n        items={this.state.items.map(\r\n          (item) => (this.setState({ date: item.date }), (name = item.name))\r\n        )}\r\n        loadItemsForMonth={this.loadItems.bind(this)}\r\n        selected={\"2020-09-04\"}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n        // markingType={'period'}\r\n        // markedDates={{\r\n        //    '2017-05-08': {textColor: '#666'},\r\n        //    '2017-05-09': {textColor: '#666'},\r\n        //    '2017-05-14': {startingDay: true, endingDay: true, color: 'blue'},\r\n        //    '2017-05-21': {startingDay: true, color: 'blue'},\r\n        //    '2017-05-22': {endingDay: true, color: 'gray'},\r\n        //    '2017-05-24': {startingDay: true, color: 'gray'},\r\n        //    '2017-05-25': {color: 'gray'},\r\n        //    '2017-05-26': {endingDay: true, color: 'gray'}}}\r\n        // monthFormat={'yyyy'}\r\n        // theme={{calendarBackground: 'red', agendaKnobColor: 'green'}}\r\n        //renderDay={(day, item) => (<Text>{day ? day.day: 'item'}</Text>)}\r\n      />\r\n    );\r\n  }\r\n\r\n  loadItems(day) {\r\n    setTimeout(() => {\r\n      for (let i = -15; i < 10; i++) {\r\n        const time = day.timestamp + i * 24 * 60 * 60 * 1000;\r\n        //this.state.items.map((item) => this.setState({ date: item.date }));\r\n        const strTime = this.timeToString(time);\r\n        //this.state.items.map((item) => (\r\n        if (!this.state.items[strTime]) {\r\n          this.state.items[strTime] = [];\r\n          const numItems = Math.floor(Math.random() * 5);\r\n          for (let j = 0; j < numItems; j++) {\r\n            this.state.items[strTime].push({\r\n              name: \"Item for \" + strTime,\r\n              height: Math.max(50, Math.floor(Math.random() * 150)),\r\n            });\r\n          }\r\n        }\r\n      }\r\n      //console.log(this.state.items);\r\n      const newItems = [];\r\n\r\n      // this.state.items.map((item) => this.setState({ date: item.date }));\r\n      Object.keys(this.state.items).forEach((key) => {\r\n        newItems[key] = this.state.items[key];\r\n      });\r\n      this.setState({\r\n        items: newItems,\r\n      });\r\n    });\r\n    // console.log(`Load Items for ${day.year}-${day.month}`);\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <View style={[styles.item, { height: item.height }]}>\r\n        {this.state.items.map((item) => (\r\n          <Text key={item.id}>{item.name}</Text>\r\n        ))}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  renderEmptyDate() {\r\n    return (\r\n      <View style={styles.emptyDate}>\r\n        <Text>This is empty date!</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n\r\n  timeToString(time) {\r\n    const date = new Date(time);\r\n    //const date = this.state.date;\r\n    return date.toISOString().split(\"T\")[0];\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    marginTop: 17,\r\n  },\r\n  emptyDate: {\r\n    height: 15,\r\n    flex: 1,\r\n    paddingTop: 30,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}