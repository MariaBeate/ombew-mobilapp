{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\React-Fitness-Mobil\\\\FitnessAppMobil\\\\screens\\\\Fitnessplan.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Agenda } from \"react-native-calendars\";\n\nvar Fitnessplan = function (_Component) {\n  _inherits(Fitnessplan, _Component);\n\n  var _super = _createSuper(Fitnessplan);\n\n  function Fitnessplan(props) {\n    var _this;\n\n    _classCallCheck(this, Fitnessplan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: []\n    };\n    return _this;\n  }\n\n  _createClass(Fitnessplan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://192.168.178.23:9000/api/fitnessevents\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          items: data\n        });\n      }).catch(function (error) {\n        throw error;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Agenda, {\n        items: this.state.items,\n        selected: \"2020-09-04\",\n        renderItem: this.renderItem.bind(this),\n        renderEmptyDate: this.renderEmptyDate.bind(this),\n        rowHasChanged: this.rowHasChanged.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(day) {\n      return React.createElement(View, {\n        style: [styles.item, {\n          height: item.height\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, this.state.items.map(function (item) {\n        return React.createElement(Text, {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }\n        }, item.name);\n      }));\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return React.createElement(View, {\n        style: [styles.item, {\n          height: item.height\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }\n      }, this.state.items.map(function (item) {\n        return React.createElement(Text, {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }\n        }, item.name);\n      }));\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return React.createElement(View, {\n        style: styles.emptyDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, \"This is empty date!\"));\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }, {\n    key: \"timeToString\",\n    value: function timeToString(time) {\n      var date = new Date(time);\n      return date.toISOString().split(\"T\")[0];\n    }\n  }]);\n\n  return Fitnessplan;\n}(Component);\n\nexport { Fitnessplan as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    borderRadius: 5,\n    padding: 10,\n    marginRight: 10,\n    marginTop: 17\n  },\n  emptyDate: {\n    height: 15,\n    flex: 1,\n    paddingTop: 30\n  }\n});","map":{"version":3,"sources":["C:/Desktop/React-Fitness-Mobil/FitnessAppMobil/screens/Fitnessplan.js"],"names":["React","Component","Agenda","Fitnessplan","props","state","items","fetch","then","response","json","data","setState","catch","error","renderItem","bind","renderEmptyDate","rowHasChanged","day","styles","item","height","map","id","name","emptyDate","r1","r2","time","date","Date","toISOString","split","StyleSheet","create","backgroundColor","flex","borderRadius","padding","marginRight","marginTop","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Text, View, StyleSheet } from \"react-native\";\r\nimport { Agenda } from \"react-native-calendars\";\r\n\r\nexport default class Fitnessplan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // fetch(\"http://192.168.0.176:9000/api/fitness\")\r\n    //fetch(\"http://192.168.178.23:9000/api/fitness\")\r\n    fetch(\"http://192.168.178.23:9000/api/fitnessevents\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ items: data });\r\n      })\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <Agenda\r\n        items={this.state.items}\r\n        //loadItemsForMonth={this.loadItems.bind(this)}\r\n        selected={\"2020-09-04\"}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n        // markingType={'period'}\r\n        // markedDates={{\r\n        //    '2017-05-08': {textColor: '#666'},\r\n        //    '2017-05-09': {textColor: '#666'},\r\n        //    '2017-05-14': {startingDay: true, endingDay: true, color: 'blue'},\r\n        //    '2017-05-21': {startingDay: true, color: 'blue'},\r\n        //    '2017-05-22': {endingDay: true, color: 'gray'},\r\n        //    '2017-05-24': {startingDay: true, color: 'gray'},\r\n        //    '2017-05-25': {color: 'gray'},\r\n        //    '2017-05-26': {endingDay: true, color: 'gray'}}}\r\n        // monthFormat={'yyyy'}\r\n        // theme={{calendarBackground: 'red', agendaKnobColor: 'green'}}\r\n        //renderDay={(day, item) => (<Text>{day ? day.day: 'item'}</Text>)}\r\n      />\r\n    );\r\n  }\r\n\r\n  loadItems(day) {\r\n    return (\r\n      <View style={[styles.item, { height: item.height }]}>\r\n        {this.state.items.map((item) => (\r\n          <Text key={item.id}>{item.name}</Text>\r\n        ))}\r\n      </View>\r\n    );\r\n    /*setTimeout(() => {\r\n      for (let i = -15; i < 10; i++) {\r\n        const time = day.timestamp + i * 24 * 60 * 60 * 1000;\r\n        const strTime = this.timeToString(time);\r\n        if (!this.state.items[strTime]) {\r\n          this.state.items[strTime] = [];\r\n          const numItems = Math.floor(Math.random() * 5);\r\n          for (let j = 0; j < numItems; j++) {\r\n            this.state.items[strTime].push({\r\n              name: \"Item for \" + strTime,\r\n              height: Math.max(50, Math.floor(Math.random() * 150)),\r\n            });\r\n          }\r\n        }\r\n      }\r\n      //console.log(this.state.items);\r\n      const newItems = {};\r\n      Object.keys(this.state.items).forEach((key) => {\r\n        newItems[key] = this.state.items[key];\r\n      });\r\n      this.setState({\r\n        items: newItems,\r\n      });\r\n    }, 1000);\r\n    // console.log(`Load Items for ${day.year}-${day.month}`);\r\n    */\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <View style={[styles.item, { height: item.height }]}>\r\n        {this.state.items.map((item) => (\r\n          <Text key={item.id}>{item.name}</Text>\r\n        ))}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  renderEmptyDate() {\r\n    return (\r\n      <View style={styles.emptyDate}>\r\n        <Text>This is empty date!</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n\r\n  timeToString(time) {\r\n    const date = new Date(time);\r\n    return date.toISOString().split(\"T\")[0];\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    marginTop: 17,\r\n  },\r\n  emptyDate: {\r\n    height: 15,\r\n    flex: 1,\r\n    paddingTop: 30,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}