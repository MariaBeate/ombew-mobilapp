{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\FitnessAppMobil\\\\node_modules\\\\react-native-tableview-simple\\\\lib\\\\module\\\\components\\\\TableView.js\";\nimport React from 'react';\nimport { useColorScheme } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { THEMES, ThemeContext } from \"./Theme\";\n\nvar TableView = function TableView(_ref) {\n  var _THEMES$appearances;\n\n  var children = _ref.children,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === void 0 ? 'auto' : _ref$appearance,\n      customAppearances = _ref.customAppearances;\n  var themeMode = THEMES == null ? void 0 : (_THEMES$appearances = THEMES.appearances) == null ? void 0 : _THEMES$appearances['light'];\n  var systemColorScheme = useColorScheme();\n\n  if (appearance === 'auto' && systemColorScheme === 'dark' || systemColorScheme === 'light') {\n    var _THEMES$appearances2;\n\n    themeMode = THEMES == null ? void 0 : (_THEMES$appearances2 = THEMES.appearances) == null ? void 0 : _THEMES$appearances2[systemColorScheme];\n  } else if (appearance === 'light' || appearance === 'dark') {\n    var _THEMES$appearances3;\n\n    themeMode = THEMES == null ? void 0 : (_THEMES$appearances3 = THEMES.appearances) == null ? void 0 : _THEMES$appearances3[appearance];\n  } else if (customAppearances && appearance && Object.prototype.hasOwnProperty.call(customAppearances, appearance)) {\n    themeMode = customAppearances[appearance];\n  }\n\n  return React.createElement(ThemeContext.Provider, {\n    value: themeMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.tableView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nvar styles = StyleSheet.create({\n  tableView: {\n    flexDirection: 'column'\n  }\n});\nexport default TableView;","map":{"version":3,"sources":["../../../src/components/TableView.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;SACS,c;;;AACT,SAAS,MAAT,EAAiB,YAAjB;;AAUA,IAAM,SAAS,GAAiC,SAA1C,SAA0C,OAIvB;AAAA;;AAAA,MAHvB,QAGuB,QAHvB,QAGuB;AAAA,6BAFvB,UAEuB;AAAA,MAFvB,UAEuB,gCAFV,MAEU;AAAA,MADvB,iBACuB,QADvB,iBACuB;AACvB,MAAI,SAAS,GAAqB,MAArB,2CAAqB,MAAM,CAAE,WAA7B,qBAAqB,oBAAsB,OAAtB,CAAlC;AACA,MAAM,iBAAiB,GAAG,cAAc,EAAxC;;AACA,MACG,UAAU,KAAK,MAAf,IAAyB,iBAAiB,KAAK,MAAhD,IACA,iBAAiB,KAAK,OAFxB,EAGE;AAAA;;AACA,IAAA,SAAS,GAAG,MAAH,4CAAG,MAAM,CAAE,WAAX,qBAAG,qBAAsB,iBAAtB,CAAZ;AACD,GALD,MAKO,IAAI,UAAU,KAAK,OAAf,IAA0B,UAAU,KAAK,MAA7C,EAAqD;AAAA;;AAC1D,IAAA,SAAS,GAAG,MAAH,4CAAG,MAAM,CAAE,WAAX,qBAAG,qBAAsB,UAAtB,CAAZ;AACD,GAFM,MAEA,IACL,iBAAiB,IACjB,UADA,IAEA,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,iBAArC,EAAwD,UAAxD,CAHK,EAIL;AACA,IAAA,SAAS,GAAG,iBAAiB,CAAC,UAAD,CAA7B;AACD;;AACD,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,MAAM,CAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgC,QAAhC,CADF,CADF;AAKD,CA1BD;;AA4BA,IAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CAAkB;AAC/B,EAAA,SAAS,EAAE;AACT,IAAA,aAAa,EAAE;AADN;AADoB,CAAlB,CAAf;AAMA,eAAe,SAAf","sourceRoot":"","sourcesContent":["import React from 'react';\nimport { useColorScheme, StyleSheet, View } from 'react-native';\nimport { THEMES, ThemeContext } from './Theme';\nconst TableView = ({ children, appearance = 'auto', customAppearances, }) => {\n    let themeMode = THEMES?.appearances?.['light'];\n    const systemColorScheme = useColorScheme();\n    if ((appearance === 'auto' && systemColorScheme === 'dark') ||\n        systemColorScheme === 'light') {\n        themeMode = THEMES?.appearances?.[systemColorScheme];\n    }\n    else if (appearance === 'light' || appearance === 'dark') {\n        themeMode = THEMES?.appearances?.[appearance];\n    }\n    else if (customAppearances &&\n        appearance &&\n        Object.prototype.hasOwnProperty.call(customAppearances, appearance)) {\n        themeMode = customAppearances[appearance];\n    }\n    return (<ThemeContext.Provider value={themeMode}>\n      <View style={styles.tableView}>{children}</View>\n    </ThemeContext.Provider>);\n};\nconst styles = StyleSheet.create({\n    tableView: {\n        flexDirection: 'column',\n    },\n});\nexport default TableView;\n//# sourceMappingURL=TableView.js.map"]},"metadata":{},"sourceType":"module"}