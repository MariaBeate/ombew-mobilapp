{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\FitnessAppMobil\\\\screens\\\\Fitnessplan.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { LocaleConfig } from \"react-native-calendars\";\n\nvar Fitnessplan = function (_Component) {\n  _inherits(Fitnessplan, _Component);\n\n  var _super = _createSuper(Fitnessplan);\n\n  function Fitnessplan(props) {\n    var _this;\n\n    _classCallCheck(this, Fitnessplan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      date: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Fitnessplan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n      var date = new Date().getDate();\n      var month = new Date().getMonth() + 1;\n      var year = new Date().getFullYear();\n      var hours = new Date().getHours();\n      var min = new Date().getMinutes();\n      var sec = new Date().getSeconds();\n      that.setState({\n        date: date\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          paddingTop: 50,\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, React.createElement(Calendar, {\n        current: this.state.date,\n        minDate: \"2020-07-01\",\n        onDayPress: function onDayPress(day) {\n          console.log(\"selected day\", day);\n        },\n        monthFormat: \"yyyy MM\",\n        onMonthChange: function onMonthChange(month) {\n          console.log(\"month changed\", month);\n        },\n        hideArrows: true,\n        hideExtraDays: true,\n        disableMonthChange: true,\n        firstDay: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }), React.createElement(Agenda, {\n        items: {\n          \"2012-05-22\": [{\n            text: \"item 1 - any js object\"\n          }],\n          \"2012-05-23\": [{\n            text: \"item 2 - any js object\"\n          }],\n          \"2012-05-24\": [],\n          \"2012-05-25\": [{\n            text: \"item 3 - any js object\"\n          }, {\n            text: \"any js object\"\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(mongh) {\n          console.log(\"trigger items loading\");\n        },\n        onDayPress: function onDayPress(day) {\n          console.log(\"day pressed\");\n        },\n        onDayChange: function onDayChange(day) {\n          console.log(\"day changed\");\n        },\n        selected: \"2012-05-16\",\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 20\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 20\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 20\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        theme: _objectSpread(_objectSpread({}, calendarTheme), {}, {\n          agendaDayTextColor: \"yellow\",\n          agendaDayNumColor: \"green\",\n          agendaTodayColor: \"red\"\n        }),\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Fitnessplan;\n}(Component);\n\nexport default Fitnessplan;","map":{"version":3,"sources":["C:/Desktop/FitnessAppMobil/screens/Fitnessplan.js"],"names":["React","Component","Calendar","CalendarList","Agenda","LocaleConfig","Fitnessplan","props","state","date","that","Date","getDate","month","getMonth","year","getFullYear","hours","getHours","min","getMinutes","sec","getSeconds","setState","paddingTop","flex","day","console","log","text","mongh","item","firstItemInDay","r1","r2","calendarTheme","agendaDayTextColor","agendaDayNumColor","agendaTodayColor"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,MAAjC,QAA+C,wBAA/C;AACA,SAASC,YAAT,QAA6B,wBAA7B;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAHiB;AAIlB;;;;wCAEmB;AAClB,UAAIC,IAAI,GAAG,IAAX;AAEA,UAAID,IAAI,GAAG,IAAIE,IAAJ,GAAWC,OAAX,EAAX;AACA,UAAIC,KAAK,GAAG,IAAIF,IAAJ,GAAWG,QAAX,KAAwB,CAApC;AACA,UAAIC,IAAI,GAAG,IAAIJ,IAAJ,GAAWK,WAAX,EAAX;AACA,UAAIC,KAAK,GAAG,IAAIN,IAAJ,GAAWO,QAAX,EAAZ;AACA,UAAIC,GAAG,GAAG,IAAIR,IAAJ,GAAWS,UAAX,EAAV;AACA,UAAIC,GAAG,GAAG,IAAIV,IAAJ,GAAWW,UAAX,EAAV;AAEAZ,MAAAA,IAAI,CAACa,QAAL,CAAc;AAEZd,QAAAA,IAAI,EAAEA;AAFM,OAAd;AAID;;;6BAEQ;AAEP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEe,UAAAA,UAAU,EAAE,EAAd;AAAkBC,UAAAA,IAAI,EAAE;AAAxB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAEE,QAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWC,IAFtB;AAIE,QAAA,OAAO,EAAE,YAJX;AAQE,QAAA,UAAU,EAAE,oBAACiB,GAAD,EAAS;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,SAVH;AAYE,QAAA,WAAW,EAAE,SAZf;AAcE,QAAA,aAAa,EAAE,uBAACb,KAAD,EAAW;AACxBc,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bf,KAA7B;AACD,SAhBH;AAkBE,QAAA,UAAU,EAAE,IAlBd;AAoBE,QAAA,aAAa,EAAE,IApBjB;AAuBE,QAAA,kBAAkB,EAAE,IAvBtB;AAyBE,QAAA,QAAQ,EAAE,CAzBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EA4BE,oBAAC,MAAD;AAIE,QAAA,KAAK,EAAE;AACL,wBAAc,CAAC;AAAEgB,YAAAA,IAAI,EAAE;AAAR,WAAD,CADT;AAEL,wBAAc,CAAC;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAAD,CAFT;AAGL,wBAAc,EAHT;AAIL,wBAAc,CACZ;AAAEA,YAAAA,IAAI,EAAE;AAAR,WADY,EAEZ;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAFY;AAJT,SAJT;AAcE,QAAA,iBAAiB,EAAE,2BAACC,KAAD,EAAW;AAC5BH,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAhBH;AAkBE,QAAA,UAAU,EAAE,oBAACF,GAAD,EAAS;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,SApBH;AAsBE,QAAA,WAAW,EAAE,qBAACF,GAAD,EAAS;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,SAxBH;AA0BE,QAAA,QAAQ,EAAE,YA1BZ;AA4BE,QAAA,UAAU,EAAE,oBAACG,IAAD,EAAOC,cAAP,EAA0B;AACpC,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SA9BH;AAgCE,QAAA,SAAS,EAAE,mBAACN,GAAD,EAAMK,IAAN,EAAe;AACxB,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAlCH;AAoCE,QAAA,eAAe,EAAE,2BAAM;AACrB,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAtCH;AAwCE,QAAA,aAAa,EAAE,uBAACE,EAAD,EAAKC,EAAL,EAAY;AACzB,iBAAOD,EAAE,CAACJ,IAAH,KAAYK,EAAE,CAACL,IAAtB;AACD,SA1CH;AA4CE,QAAA,QAAQ,EAAE,IA5CZ;AA8CE,QAAA,KAAK,kCACAM,aADA;AAEHC,UAAAA,kBAAkB,EAAE,QAFjB;AAGHC,UAAAA,iBAAiB,EAAE,OAHhB;AAIHC,UAAAA,gBAAgB,EAAE;AAJf,UA9CP;AAqDE,QAAA,KAAK,EAAE,EArDT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BF,CADF;AAsFD;;;;EA/GuBrC,S;;AAkH1B,eAAeK,WAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, View, Text } from \"react-native\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport { LocaleConfig } from \"react-native-calendars\";\r\n\r\nclass Fitnessplan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { date: \"\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var that = this;\r\n\r\n    var date = new Date().getDate(); //Current Date\r\n    var month = new Date().getMonth() + 1; //Current Month\r\n    var year = new Date().getFullYear(); //Current Year\r\n    var hours = new Date().getHours(); //Current Hours\r\n    var min = new Date().getMinutes(); //Current Minutes\r\n    var sec = new Date().getSeconds(); //Current Seconds\r\n\r\n    that.setState({\r\n      //Setting the value of the date time\r\n      date: date,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //var date = new Date().getDate();\r\n    return (\r\n      <View style={{ paddingTop: 50, flex: 1 }}>\r\n        <Calendar\r\n          // Initially visible month. Default = Date()\r\n          current={this.state.date}\r\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n          minDate={\"2020-07-01\"}\r\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n          //maxDate={\"2012-05-30\"}\r\n          // Handler which gets executed on day press. Default = undefined\r\n          onDayPress={(day) => {\r\n            console.log(\"selected day\", day);\r\n          }}\r\n          // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n          monthFormat={\"yyyy MM\"}\r\n          // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n          onMonthChange={(month) => {\r\n            console.log(\"month changed\", month);\r\n          }}\r\n          // Hide month navigation arrows. Default = false\r\n          hideArrows={true}\r\n          // Do not show days of other months in month page. Default = false\r\n          hideExtraDays={true}\r\n          // If hideArrows=false and hideExtraDays=false do not swich month when tapping on greyed out\r\n          // day from another month that is visible in calendar page. Default = false\r\n          disableMonthChange={true}\r\n          // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\r\n          firstDay={1}\r\n        />\r\n        <Agenda\r\n          // the list of items that have to be displayed in agenda. If you want to render item as empty date\r\n          // the value of date key kas to be an empty array []. If there exists no value for date key it is\r\n          // considered that the date in question is not yet loaded\r\n          items={{\r\n            \"2012-05-22\": [{ text: \"item 1 - any js object\" }],\r\n            \"2012-05-23\": [{ text: \"item 2 - any js object\" }],\r\n            \"2012-05-24\": [],\r\n            \"2012-05-25\": [\r\n              { text: \"item 3 - any js object\" },\r\n              { text: \"any js object\" },\r\n            ],\r\n          }}\r\n          // callback that gets called when items for a certain month should be loaded (month became visible)\r\n          loadItemsForMonth={(mongh) => {\r\n            console.log(\"trigger items loading\");\r\n          }}\r\n          // callback that gets called on day press\r\n          onDayPress={(day) => {\r\n            console.log(\"day pressed\");\r\n          }}\r\n          // callback that gets called when day changes while scrolling agenda list\r\n          onDayChange={(day) => {\r\n            console.log(\"day changed\");\r\n          }}\r\n          // initially selected day\r\n          selected={\"2012-05-16\"}\r\n          // specify how each item should be rendered in agenda\r\n          renderItem={(item, firstItemInDay) => {\r\n            return <View />;\r\n          }}\r\n          // specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n          renderDay={(day, item) => {\r\n            return <View />;\r\n          }}\r\n          // specify how empty date content with no items should be rendered\r\n          renderEmptyDate={() => {\r\n            return <View />;\r\n          }}\r\n          // specify your item comparison function for increased performance\r\n          rowHasChanged={(r1, r2) => {\r\n            return r1.text !== r2.text;\r\n          }}\r\n          // Hide knob button. Default = false\r\n          hideKnob={true}\r\n          // agenda theme\r\n          theme={{\r\n            ...calendarTheme,\r\n            agendaDayTextColor: \"yellow\",\r\n            agendaDayNumColor: \"green\",\r\n            agendaTodayColor: \"red\",\r\n          }}\r\n          // agenda container style\r\n          style={{}}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fitnessplan;\r\n"]},"metadata":{},"sourceType":"module"}