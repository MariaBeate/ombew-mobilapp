{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\FitnessAppMobil\\\\screens\\\\Fitnessplan.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { LocaleConfig } from \"react-native-calendars\";\n\nvar Fitnessplan = function (_Component) {\n  _inherits(Fitnessplan, _Component);\n\n  var _super = _createSuper(Fitnessplan);\n\n  function Fitnessplan(props) {\n    var _this;\n\n    _classCallCheck(this, Fitnessplan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      day: 1,\n      month: 1,\n      year: 2017,\n      timestamp: timestamp,\n      dateString: \"2016-05-13\"\n    };\n    return _this;\n  }\n\n  _createClass(Fitnessplan, [{\n    key: \"render\",\n    value: function render() {\n      LocaleConfig.locales[\"fr\"] = {\n        monthNames: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"],\n        monthNamesShort: [\"Janv.\", \"Févr.\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juil.\", \"Août\", \"Sept.\", \"Oct.\", \"Nov.\", \"Déc.\"],\n        dayNames: [\"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\"],\n        dayNamesShort: [\"Dim.\", \"Lun.\", \"Mar.\", \"Mer.\", \"Jeu.\", \"Ven.\", \"Sam.\"],\n        today: \"Aujourd'hui\"\n      };\n      LocaleConfig.defaultLocale = \"fr\";\n      return React.createElement(Calendar, {\n        current: \"2012-03-01\",\n        minDate: \"2012-05-10\",\n        maxDate: \"2012-05-30\",\n        onDayPress: function onDayPress(day) {\n          console.log(\"selected day\", day);\n        },\n        onDayLongPress: function onDayLongPress(day) {\n          console.log(\"selected day\", day);\n        },\n        monthFormat: \"yyyy MM\",\n        onMonthChange: function onMonthChange(month) {\n          console.log(\"month changed\", month);\n        },\n        hideArrows: true,\n        renderArrow: function renderArrow(direction) {\n          return React.createElement(Arrow, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }\n          });\n        },\n        hideExtraDays: true,\n        disableMonthChange: true,\n        firstDay: 1,\n        hideDayNames: true,\n        showWeekNumbers: true,\n        onPressArrowLeft: function onPressArrowLeft(subtractMonth) {\n          return subtractMonth();\n        },\n        onPressArrowRight: function onPressArrowRight(addMonth) {\n          return addMonth();\n        },\n        disableArrowLeft: true,\n        disableArrowRight: true,\n        disableAllTouchEventsForDisabledDays: true,\n        renderHeader: function renderHeader(date) {},\n        enableSwipeMonths: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Fitnessplan;\n}(Component);\n\nexport default Fitnessplan;","map":{"version":3,"sources":["C:/Desktop/FitnessAppMobil/screens/Fitnessplan.js"],"names":["React","Component","Calendar","CalendarList","Agenda","LocaleConfig","Fitnessplan","props","state","day","month","year","timestamp","dateString","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","console","log","direction","subtractMonth","addMonth","date"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, View, Text } from \"react-native\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport { LocaleConfig } from \"react-native-calendars\";\r\n\r\nclass Fitnessplan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      day: 1, // day of month (1-31)\r\n      month: 1, // month of year (1-12)\r\n      year: 2017, // year\r\n      timestamp, // UTC timestamp representing 00:00 AM of this date\r\n      dateString: \"2016-05-13\", // date formatted as 'YYYY-MM-DD' string\r\n    };\r\n  }\r\n\r\n  render() {\r\n    LocaleConfig.locales[\"fr\"] = {\r\n      monthNames: [\r\n        \"Janvier\",\r\n        \"Février\",\r\n        \"Mars\",\r\n        \"Avril\",\r\n        \"Mai\",\r\n        \"Juin\",\r\n        \"Juillet\",\r\n        \"Août\",\r\n        \"Septembre\",\r\n        \"Octobre\",\r\n        \"Novembre\",\r\n        \"Décembre\",\r\n      ],\r\n      monthNamesShort: [\r\n        \"Janv.\",\r\n        \"Févr.\",\r\n        \"Mars\",\r\n        \"Avril\",\r\n        \"Mai\",\r\n        \"Juin\",\r\n        \"Juil.\",\r\n        \"Août\",\r\n        \"Sept.\",\r\n        \"Oct.\",\r\n        \"Nov.\",\r\n        \"Déc.\",\r\n      ],\r\n      dayNames: [\r\n        \"Dimanche\",\r\n        \"Lundi\",\r\n        \"Mardi\",\r\n        \"Mercredi\",\r\n        \"Jeudi\",\r\n        \"Vendredi\",\r\n        \"Samedi\",\r\n      ],\r\n      dayNamesShort: [\"Dim.\", \"Lun.\", \"Mar.\", \"Mer.\", \"Jeu.\", \"Ven.\", \"Sam.\"],\r\n      today: \"Aujourd'hui\",\r\n    };\r\n    LocaleConfig.defaultLocale = \"fr\";\r\n    return (\r\n      <Calendar\r\n        // Initially visible month. Default = Date()\r\n        current={\"2012-03-01\"}\r\n        // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n        minDate={\"2012-05-10\"}\r\n        // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n        maxDate={\"2012-05-30\"}\r\n        // Handler which gets executed on day press. Default = undefined\r\n        onDayPress={(day) => {\r\n          console.log(\"selected day\", day);\r\n        }}\r\n        // Handler which gets executed on day long press. Default = undefined\r\n        onDayLongPress={(day) => {\r\n          console.log(\"selected day\", day);\r\n        }}\r\n        // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n        monthFormat={\"yyyy MM\"}\r\n        // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n        onMonthChange={(month) => {\r\n          console.log(\"month changed\", month);\r\n        }}\r\n        // Hide month navigation arrows. Default = false\r\n        hideArrows={true}\r\n        // Replace default arrows with custom ones (direction can be 'left' or 'right')\r\n        renderArrow={(direction) => <Arrow />}\r\n        // Do not show days of other months in month page. Default = false\r\n        hideExtraDays={true}\r\n        // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out\r\n        // day from another month that is visible in calendar page. Default = false\r\n        disableMonthChange={true}\r\n        // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\r\n        firstDay={1}\r\n        // Hide day names. Default = false\r\n        hideDayNames={true}\r\n        // Show week numbers to the left. Default = false\r\n        showWeekNumbers={true}\r\n        // Handler which gets executed when press arrow icon left. It receive a callback can go back month\r\n        onPressArrowLeft={(subtractMonth) => subtractMonth()}\r\n        // Handler which gets executed when press arrow icon right. It receive a callback can go next month\r\n        onPressArrowRight={(addMonth) => addMonth()}\r\n        // Disable left arrow. Default = false\r\n        disableArrowLeft={true}\r\n        // Disable right arrow. Default = false\r\n        disableArrowRight={true}\r\n        // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\r\n        disableAllTouchEventsForDisabledDays={true}\r\n        // Replace default month and year title with custom one. the function receive a date as parameter.\r\n        renderHeader={(date) => {\r\n          /*Return JSX*/\r\n        }}\r\n        // Enable the option to swipe between months. Default = false\r\n        enableSwipeMonths={true}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fitnessplan;\r\n"]},"metadata":{},"sourceType":"module"}