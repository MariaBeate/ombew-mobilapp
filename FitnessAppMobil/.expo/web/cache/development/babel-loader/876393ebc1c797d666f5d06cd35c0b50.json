{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\FitnessAppMobil\\\\node_modules\\\\react-native-data-table\\\\src\\\\CheckableCell.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nexport var CheckableCell = function (_React$Component) {\n  _inherits(CheckableCell, _React$Component);\n\n  var _super = _createSuper(CheckableCell);\n\n  function CheckableCell(props) {\n    var _this;\n\n    _classCallCheck(this, CheckableCell);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isChecked: props.isChecked\n    };\n    _this.onPress = _this.onPress.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CheckableCell, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.isChecked !== this.state.isChecked) {\n        this.setState({\n          isChecked: nextProps.isChecked\n        });\n      }\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress() {\n      this.setState({\n        isChecked: !this.state.isChecked\n      });\n      this.props.onPress();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          isDisabled = _this$props.isDisabled,\n          style = _this$props.style,\n          width = _this$props.width,\n          renderDisabled = _this$props.renderDisabled,\n          renderIsChecked = _this$props.renderIsChecked,\n          renderIsNotChecked = _this$props.renderIsNotChecked;\n\n      if (isDisabled) {\n        var renderFunction = renderDisabled;\n\n        if (!renderFunction) {\n          renderFunction = this.state.isChecked ? renderIsChecked : renderIsNotChecked;\n        }\n\n        return React.createElement(TouchableWithoutFeedback, {\n          onPress: function onPress() {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: [style, {\n            flex: width\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, renderFunction()));\n      }\n\n      return React.createElement(TouchableOpacity, {\n        style: [style, {\n          flex: width\n        }],\n        onPress: function onPress() {\n          return _this2.onPress();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, this.state.isChecked ? renderIsChecked() : renderIsNotChecked());\n    }\n  }]);\n\n  return CheckableCell;\n}(React.Component);\nCheckableCell.propTypes = {\n  style: ViewPropTypes.style,\n  width: PropTypes.number,\n  onPress: PropTypes.func,\n  renderDisabled: PropTypes.func,\n  renderIsChecked: PropTypes.func,\n  renderIsNotChecked: PropTypes.func,\n  isChecked: PropTypes.bool,\n  isDisabled: PropTypes.bool\n};\nCheckableCell.defaultProps = {\n  width: 1,\n  isChecked: false\n};","map":{"version":3,"sources":["C:/Desktop/FitnessAppMobil/node_modules/react-native-data-table/src/CheckableCell.js"],"names":["React","PropTypes","CheckableCell","props","state","isChecked","onPress","bind","nextProps","setState","isDisabled","style","width","renderDisabled","renderIsChecked","renderIsNotChecked","renderFunction","flex","Component","propTypes","ViewPropTypes","number","func","bool","defaultProps"],"mappings":";;;;;;;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AAwBA,WAAaC,aAAb;AAAA;;AAAA;;AACE,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAEF,KAAK,CAACE;AADN,KAAb;AAGA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;AALiB;AAMlB;;AAPH;AAAA;AAAA,8CAS4BC,SAT5B,EASuC;AACnC,UAAIA,SAAS,CAACH,SAAV,KAAwB,KAAKD,KAAL,CAAWC,SAAvC,EAAkD;AAChD,aAAKI,QAAL,CAAc;AAAEJ,UAAAA,SAAS,EAAEG,SAAS,CAACH;AAAvB,SAAd;AACD;AACF;AAbH;AAAA;AAAA,8BAeY;AACR,WAAKI,QAAL,CAAc;AAAEJ,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAzB,OAAd;AACA,WAAKF,KAAL,CAAWG,OAAX;AACD;AAlBH;AAAA;AAAA,6BAoBW;AAAA;;AAAA,wBAQH,KAAKH,KARF;AAAA,UAELO,UAFK,eAELA,UAFK;AAAA,UAGLC,KAHK,eAGLA,KAHK;AAAA,UAILC,KAJK,eAILA,KAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMLC,eANK,eAMLA,eANK;AAAA,UAOLC,kBAPK,eAOLA,kBAPK;;AAUP,UAAIL,UAAJ,EAAgB;AACd,YAAIM,cAAc,GAAGH,cAArB;;AACA,YAAI,CAACG,cAAL,EAAqB;AACnBA,UAAAA,cAAc,GAAG,KAAKZ,KAAL,CAAWC,SAAX,GAAuBS,eAAvB,GAAyCC,kBAA1D;AACD;;AACD,eAEE,oBAAC,wBAAD;AAA0B,UAAA,OAAO,EAAE,mBAAM,CAAE,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAACJ,KAAD,EAAQ;AAAEM,YAAAA,IAAI,EAAEL;AAAR,WAAR,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwCI,cAAc,EAAtD,CADF,CAFF;AAMD;;AAED,aACE,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,CAACL,KAAD,EAAQ;AAAEM,UAAAA,IAAI,EAAEL;AAAR,SAAR,CAAzB;AAAmD,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACN,OAAL,EAAN;AAAA,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWC,SAAX,GAAuBS,eAAe,EAAtC,GAA2CC,kBAAkB,EADhE,CADF;AAKD;AAhDH;;AAAA;AAAA,EAAmCf,KAAK,CAACkB,SAAzC;AAmDAhB,aAAa,CAACiB,SAAd,GAA0B;AACxBR,EAAAA,KAAK,EAAES,aAAa,CAACT,KADG;AAExBC,EAAAA,KAAK,EAAEX,SAAS,CAACoB,MAFO;AAGxBf,EAAAA,OAAO,EAAEL,SAAS,CAACqB,IAHK;AAIxBT,EAAAA,cAAc,EAAEZ,SAAS,CAACqB,IAJF;AAKxBR,EAAAA,eAAe,EAAEb,SAAS,CAACqB,IALH;AAMxBP,EAAAA,kBAAkB,EAAEd,SAAS,CAACqB,IANN;AAOxBjB,EAAAA,SAAS,EAAEJ,SAAS,CAACsB,IAPG;AAQxBb,EAAAA,UAAU,EAAET,SAAS,CAACsB;AARE,CAA1B;AAWArB,aAAa,CAACsB,YAAd,GAA6B;AAC3BZ,EAAAA,KAAK,EAAE,CADoB;AAE3BP,EAAAA,SAAS,EAAE;AAFgB,CAA7B","sourcesContent":["/* @flow weak */\n\n/**\n * mSupply Mobile\n * Sustainable Solutions (NZ) Ltd. 2016\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  ViewPropTypes,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\n/**\n * Renders a CheckableCell that renders either renderIsChecked or renderIsNotChecked when isChecked\n * is true or false respectively. Whole cell returned is pressable. Callback should affect state of\n * Parent in some way that keeps the state of parent in sync with state of the CheckableCell. Kept\n * separate to maintain responsiveness of the cell.\n * @param   {object}  props             Properties passed where component was created.\n * @prop    {StyleSheet} style          Style of the CheckableCell (View props).\n * @prop    {number} width              Flexbox flex property, gives weight to the CheckableCell width\n * @prop    {object} renderIsChecked    Object is rendered as child in CheckableCell if checked.\n * @prop    {object} renderIsNotChecked Object is rendered as child in CheckableCell if notchecked.\n * @prop    {boolean} isChecked         Used to set the initial state of the cell when the\n *                                      component mounts or rerenders (e.g. table sort\n *                                      order change).\n * @return  {React.Component}           Return TouchableOpacity with child rendered according to the\n *                                      above 3 props.\n */\nexport class CheckableCell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: props.isChecked,\n    };\n    this.onPress = this.onPress.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.isChecked !== this.state.isChecked) {\n      this.setState({ isChecked: nextProps.isChecked });\n    }\n  }\n\n  onPress() {\n    this.setState({ isChecked: !this.state.isChecked });\n    this.props.onPress();\n  }\n\n  render() {\n    const {\n      isDisabled,\n      style,\n      width,\n      renderDisabled,\n      renderIsChecked,\n      renderIsNotChecked,\n    } = this.props;\n\n    if (isDisabled) {\n      let renderFunction = renderDisabled;\n      if (!renderFunction) {\n        renderFunction = this.state.isChecked ? renderIsChecked : renderIsNotChecked;\n      }\n      return (\n        // Filler function for onPress stops press through to parent component\n        <TouchableWithoutFeedback onPress={() => {}}>\n          <View style={[style, { flex: width }]}>{renderFunction()}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity style={[style, { flex: width }]} onPress={() => this.onPress()}>\n        {this.state.isChecked ? renderIsChecked() : renderIsNotChecked()}\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckableCell.propTypes = {\n  style: ViewPropTypes.style,\n  width: PropTypes.number,\n  onPress: PropTypes.func,\n  renderDisabled: PropTypes.func,\n  renderIsChecked: PropTypes.func,\n  renderIsNotChecked: PropTypes.func,\n  isChecked: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n\nCheckableCell.defaultProps = {\n  width: 1,\n  isChecked: false,\n};\n"]},"metadata":{},"sourceType":"module"}