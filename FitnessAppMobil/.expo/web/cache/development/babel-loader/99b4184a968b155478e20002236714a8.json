{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\FitnessAppMobil\\\\screens\\\\Fitnessplan.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { LocaleConfig } from \"react-native-calendars\";\n\nvar Fitnessplan = function (_Component) {\n  _inherits(Fitnessplan, _Component);\n\n  var _super = _createSuper(Fitnessplan);\n\n  function Fitnessplan(props) {\n    var _this;\n\n    _classCallCheck(this, Fitnessplan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      date: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Fitnessplan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n      var date = new Date().getDate();\n      var month = new Date().getMonth() + 1;\n      var year = new Date().getFullYear();\n      var hours = new Date().getHours();\n      var min = new Date().getMinutes();\n      var sec = new Date().getSeconds();\n      that.setState({\n        date: date\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, React.createElement(Agenda, {\n        items: {\n          \"2012-05-22\": [{\n            text: \"item 1 - any js object\"\n          }],\n          \"2012-05-23\": [{\n            text: \"item 2 - any js object\"\n          }],\n          \"2012-05-24\": [],\n          \"2012-05-25\": [{\n            text: \"item 3 - any js object\"\n          }, {\n            text: \"any js object\"\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(mongh) {\n          console.log(\"trigger items loading\");\n        },\n        onDayPress: function onDayPress(day) {\n          console.log(\"day pressed\");\n        },\n        onDayChange: function onDayChange(day) {\n          console.log(\"day changed\");\n        },\n        selected: \"2012-05-16\",\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 20\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 20\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 20\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        theme: {},\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Fitnessplan;\n}(Component);\n\nexport default Fitnessplan;","map":{"version":3,"sources":["C:/Desktop/FitnessAppMobil/screens/Fitnessplan.js"],"names":["React","Component","Calendar","CalendarList","Agenda","LocaleConfig","Fitnessplan","props","state","date","that","Date","getDate","month","getMonth","year","getFullYear","hours","getHours","min","getMinutes","sec","getSeconds","setState","text","mongh","console","log","day","item","firstItemInDay","r1","r2"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,MAAjC,QAA+C,wBAA/C;AACA,SAASC,YAAT,QAA6B,wBAA7B;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AAHiB;AAIlB;;;;wCAEmB;AAClB,UAAIC,IAAI,GAAG,IAAX;AAEA,UAAID,IAAI,GAAG,IAAIE,IAAJ,GAAWC,OAAX,EAAX;AACA,UAAIC,KAAK,GAAG,IAAIF,IAAJ,GAAWG,QAAX,KAAwB,CAApC;AACA,UAAIC,IAAI,GAAG,IAAIJ,IAAJ,GAAWK,WAAX,EAAX;AACA,UAAIC,KAAK,GAAG,IAAIN,IAAJ,GAAWO,QAAX,EAAZ;AACA,UAAIC,GAAG,GAAG,IAAIR,IAAJ,GAAWS,UAAX,EAAV;AACA,UAAIC,GAAG,GAAG,IAAIV,IAAJ,GAAWW,UAAX,EAAV;AAEAZ,MAAAA,IAAI,CAACa,QAAL,CAAc;AAEZd,QAAAA,IAAI,EAAEA;AAFM,OAAd;AAID;;;6BAEQ;AAEP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAIE,QAAA,KAAK,EAAE;AACL,wBAAc,CAAC;AAAEe,YAAAA,IAAI,EAAE;AAAR,WAAD,CADT;AAEL,wBAAc,CAAC;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAAD,CAFT;AAGL,wBAAc,EAHT;AAIL,wBAAc,CACZ;AAAEA,YAAAA,IAAI,EAAE;AAAR,WADY,EAEZ;AAAEA,YAAAA,IAAI,EAAE;AAAR,WAFY;AAJT,SAJT;AAcE,QAAA,iBAAiB,EAAE,2BAACC,KAAD,EAAW;AAC5BC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAhBH;AAkBE,QAAA,UAAU,EAAE,oBAACC,GAAD,EAAS;AACnBF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,SApBH;AAsBE,QAAA,WAAW,EAAE,qBAACC,GAAD,EAAS;AACpBF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,SAxBH;AA0BE,QAAA,QAAQ,EAAE,YA1BZ;AA4BE,QAAA,UAAU,EAAE,oBAACE,IAAD,EAAOC,cAAP,EAA0B;AACpC,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SA9BH;AAgCE,QAAA,SAAS,EAAE,mBAACF,GAAD,EAAMC,IAAN,EAAe;AACxB,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAlCH;AAoCE,QAAA,eAAe,EAAE,2BAAM;AACrB,iBAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAtCH;AAwCE,QAAA,aAAa,EAAE,uBAACE,EAAD,EAAKC,EAAL,EAAY;AACzB,iBAAOD,EAAE,CAACP,IAAH,KAAYQ,EAAE,CAACR,IAAtB;AACD,SA1CH;AA4CE,QAAA,QAAQ,EAAE,IA5CZ;AA8CE,QAAA,KAAK,EAAE,EA9CT;AAgDE,QAAA,KAAK,EAAE,EAhDT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAsDD;;;;EA/EuBvB,S;;AAkF1B,eAAeK,WAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, View, Text } from \"react-native\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport { LocaleConfig } from \"react-native-calendars\";\r\n\r\nclass Fitnessplan extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { date: \"\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var that = this;\r\n\r\n    var date = new Date().getDate(); //Current Date\r\n    var month = new Date().getMonth() + 1; //Current Month\r\n    var year = new Date().getFullYear(); //Current Year\r\n    var hours = new Date().getHours(); //Current Hours\r\n    var min = new Date().getMinutes(); //Current Minutes\r\n    var sec = new Date().getSeconds(); //Current Seconds\r\n\r\n    that.setState({\r\n      //Setting the value of the date time\r\n      date: date,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //var date = new Date().getDate();\r\n    return (\r\n      <View>\r\n        <Agenda\r\n          // the list of items that have to be displayed in agenda. If you want to render item as empty date\r\n          // the value of date key kas to be an empty array []. If there exists no value for date key it is\r\n          // considered that the date in question is not yet loaded\r\n          items={{\r\n            \"2012-05-22\": [{ text: \"item 1 - any js object\" }],\r\n            \"2012-05-23\": [{ text: \"item 2 - any js object\" }],\r\n            \"2012-05-24\": [],\r\n            \"2012-05-25\": [\r\n              { text: \"item 3 - any js object\" },\r\n              { text: \"any js object\" },\r\n            ],\r\n          }}\r\n          // callback that gets called when items for a certain month should be loaded (month became visible)\r\n          loadItemsForMonth={(mongh) => {\r\n            console.log(\"trigger items loading\");\r\n          }}\r\n          // callback that gets called on day press\r\n          onDayPress={(day) => {\r\n            console.log(\"day pressed\");\r\n          }}\r\n          // callback that gets called when day changes while scrolling agenda list\r\n          onDayChange={(day) => {\r\n            console.log(\"day changed\");\r\n          }}\r\n          // initially selected day\r\n          selected={\"2012-05-16\"}\r\n          // specify how each item should be rendered in agenda\r\n          renderItem={(item, firstItemInDay) => {\r\n            return <View />;\r\n          }}\r\n          // specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n          renderDay={(day, item) => {\r\n            return <View />;\r\n          }}\r\n          // specify how empty date content with no items should be rendered\r\n          renderEmptyDate={() => {\r\n            return <View />;\r\n          }}\r\n          // specify your item comparison function for increased performance\r\n          rowHasChanged={(r1, r2) => {\r\n            return r1.text !== r2.text;\r\n          }}\r\n          // Hide knob button. Default = false\r\n          hideKnob={true}\r\n          // agenda theme\r\n          theme={{}}\r\n          // agenda container style\r\n          style={{}}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fitnessplan;\r\n"]},"metadata":{},"sourceType":"module"}