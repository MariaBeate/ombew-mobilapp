{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Desktop\\\\React-Fitness-Mobil\\\\FitnessAppMobil\\\\node_modules\\\\react-native-date-picker\\\\src\\\\DatePickerAndroid.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport moment from 'moment';\nvar NativeDatePicker = requireNativeComponent(\"DatePickerManager\", DatePickerAndroid, {\n  nativeOnly: {\n    onChange: true\n  }\n});\nvar height = 180;\nvar timeModeWidth = 240;\nvar defaultWidth = 310;\n\nvar DatePickerAndroid = function (_React$PureComponent) {\n  _inherits(DatePickerAndroid, _React$PureComponent);\n\n  var _super = _createSuper(DatePickerAndroid);\n\n  function DatePickerAndroid() {\n    var _this;\n\n    _classCallCheck(this, DatePickerAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getStyle = function () {\n      var width = _this.props.mode === 'time' ? timeModeWidth : defaultWidth;\n      return [{\n        width: width,\n        height: height\n      }, _this.props.style];\n    };\n\n    _this._onChange = function (e) {\n      var jsDate = _this._fromIsoWithTimeZoneOffset(e.nativeEvent.date).toDate();\n\n      _this.props.onDateChange && _this.props.onDateChange(jsDate);\n\n      if (_this.props.onDateStringChange) {\n        _this.props.onDateStringChange(e.nativeEvent.dateString);\n      }\n    };\n\n    _this._maximumDate = function () {\n      return _this.props.maximumDate && _this._toIsoWithTimeZoneOffset(_this.props.maximumDate);\n    };\n\n    _this._minimumDate = function () {\n      return _this.props.minimumDate && _this._toIsoWithTimeZoneOffset(_this.props.minimumDate);\n    };\n\n    _this._date = function () {\n      return _this._toIsoWithTimeZoneOffset(_this.props.date);\n    };\n\n    _this._fromIsoWithTimeZoneOffset = function (date) {\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return moment(date);\n      return moment.utc(date).subtract(_this.props.timeZoneOffsetInMinutes, 'minutes');\n    };\n\n    _this._toIsoWithTimeZoneOffset = function (date) {\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return moment(date).toISOString();\n      return moment.utc(date).add(_this.props.timeZoneOffsetInMinutes, 'minutes').toISOString();\n    };\n\n    return _this;\n  }\n\n  _createClass(DatePickerAndroid, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NativeDatePicker, _extends({}, this.props, {\n        date: this._date(),\n        minimumDate: this._minimumDate(),\n        maximumDate: this._maximumDate(),\n        onChange: this._onChange,\n        style: this.getStyle(),\n        utc: this.props.timeZoneOffsetInMinutes !== undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return DatePickerAndroid;\n}(React.PureComponent);\n\nexport default DatePickerAndroid;","map":{"version":3,"sources":["C:/Desktop/React-Fitness-Mobil/FitnessAppMobil/node_modules/react-native-date-picker/src/DatePickerAndroid.js"],"names":["React","requireNativeComponent","moment","NativeDatePicker","DatePickerAndroid","nativeOnly","onChange","height","timeModeWidth","defaultWidth","getStyle","width","props","mode","style","_onChange","e","jsDate","_fromIsoWithTimeZoneOffset","nativeEvent","date","toDate","onDateChange","onDateStringChange","dateString","_maximumDate","maximumDate","_toIsoWithTimeZoneOffset","_minimumDate","minimumDate","_date","timeZoneOffsetInMinutes","undefined","utc","subtract","toISOString","add","PureComponent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;SACqBC,sB;AACrB,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAMC,gBAAgB,GAAGF,sBAAsB,sBAE7CG,iBAF6C,EAG7C;AAAEC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAAd,CAH6C,CAA/C;AAMA,IAAMC,MAAM,GAAG,GAAf;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,YAAY,GAAG,GAArB;;IAEML,iB;;;;;;;;;;;;;;;;UAeJM,Q,GAAW,YAAM;AACf,UAAMC,KAAK,GAAG,MAAKC,KAAL,CAAWC,IAAX,KAAoB,MAApB,GAA6BL,aAA7B,GAA6CC,YAA3D;AACA,aAAO,CAAC;AAAEE,QAAAA,KAAK,EAALA,KAAF;AAASJ,QAAAA,MAAM,EAANA;AAAT,OAAD,EAAoB,MAAKK,KAAL,CAAWE,KAA/B,CAAP;AACD,K;;UAEDC,S,GAAY,UAAAC,CAAC,EAAI;AACf,UAAMC,MAAM,GAAG,MAAKC,0BAAL,CAAgCF,CAAC,CAACG,WAAF,CAAcC,IAA9C,EAAoDC,MAApD,EAAf;;AACA,YAAKT,KAAL,CAAWU,YAAX,IAA2B,MAAKV,KAAL,CAAWU,YAAX,CAAwBL,MAAxB,CAA3B;;AACA,UAAI,MAAKL,KAAL,CAAWW,kBAAf,EAAmC;AACjC,cAAKX,KAAL,CAAWW,kBAAX,CAA8BP,CAAC,CAACG,WAAF,CAAcK,UAA5C;AACD;AACF,K;;UAEDC,Y,GAAe;AAAA,aACb,MAAKb,KAAL,CAAWc,WAAX,IACA,MAAKC,wBAAL,CAA8B,MAAKf,KAAL,CAAWc,WAAzC,CAFa;AAAA,K;;UAIfE,Y,GAAe;AAAA,aACb,MAAKhB,KAAL,CAAWiB,WAAX,IACA,MAAKF,wBAAL,CAA8B,MAAKf,KAAL,CAAWiB,WAAzC,CAFa;AAAA,K;;UAIfC,K,GAAQ;AAAA,aAAM,MAAKH,wBAAL,CAA8B,MAAKf,KAAL,CAAWQ,IAAzC,CAAN;AAAA,K;;UAERF,0B,GAA6B,UAAAE,IAAI,EAAI;AACnC,UAAI,MAAKR,KAAL,CAAWmB,uBAAX,KAAuCC,SAA3C,EAAsD,OAAO9B,MAAM,CAACkB,IAAD,CAAb;AAEtD,aAAOlB,MAAM,CACV+B,GADI,CACAb,IADA,EAEJc,QAFI,CAEK,MAAKtB,KAAL,CAAWmB,uBAFhB,EAEyC,SAFzC,CAAP;AAGD,K;;UAEDJ,wB,GAA2B,UAAAP,IAAI,EAAI;AACjC,UAAI,MAAKR,KAAL,CAAWmB,uBAAX,KAAuCC,SAA3C,EACE,OAAO9B,MAAM,CAACkB,IAAD,CAAN,CAAae,WAAb,EAAP;AAEF,aAAOjC,MAAM,CACV+B,GADI,CACAb,IADA,EAEJgB,GAFI,CAEA,MAAKxB,KAAL,CAAWmB,uBAFX,EAEoC,SAFpC,EAGJI,WAHI,EAAP;AAID,K;;;;;;;6BArDQ;AACP,aACE,oBAAC,gBAAD,eACM,KAAKvB,KADX;AAEE,QAAA,IAAI,EAAE,KAAKkB,KAAL,EAFR;AAGE,QAAA,WAAW,EAAE,KAAKF,YAAL,EAHf;AAIE,QAAA,WAAW,EAAE,KAAKH,YAAL,EAJf;AAKE,QAAA,QAAQ,EAAE,KAAKV,SALjB;AAME,QAAA,KAAK,EAAE,KAAKL,QAAL,EANT;AAOE,QAAA,GAAG,EAAE,KAAKE,KAAL,CAAWmB,uBAAX,KAAuCC,SAP9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAWD;;;;EAb6BhC,KAAK,CAACqC,a;;AAyDtC,eAAejC,iBAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, requireNativeComponent } from 'react-native'\nimport moment from 'moment'\n\nconst NativeDatePicker = requireNativeComponent(\n  `DatePickerManager`,\n  DatePickerAndroid,\n  { nativeOnly: { onChange: true } }\n)\n\nconst height = 180\nconst timeModeWidth = 240\nconst defaultWidth = 310\n\nclass DatePickerAndroid extends React.PureComponent {\n  render() {\n    return (\n      <NativeDatePicker\n        {...this.props}\n        date={this._date()}\n        minimumDate={this._minimumDate()}\n        maximumDate={this._maximumDate()}\n        onChange={this._onChange}\n        style={this.getStyle()}\n        utc={this.props.timeZoneOffsetInMinutes !== undefined}\n      />\n    )\n  }\n\n  getStyle = () => {\n    const width = this.props.mode === 'time' ? timeModeWidth : defaultWidth\n    return [{ width, height }, this.props.style]\n  }\n\n  _onChange = e => {\n    const jsDate = this._fromIsoWithTimeZoneOffset(e.nativeEvent.date).toDate()\n    this.props.onDateChange && this.props.onDateChange(jsDate)\n    if (this.props.onDateStringChange) {\n      this.props.onDateStringChange(e.nativeEvent.dateString)\n    }\n  }\n\n  _maximumDate = () =>\n    this.props.maximumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.maximumDate)\n\n  _minimumDate = () =>\n    this.props.minimumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.minimumDate)\n\n  _date = () => this._toIsoWithTimeZoneOffset(this.props.date)\n\n  _fromIsoWithTimeZoneOffset = date => {\n    if (this.props.timeZoneOffsetInMinutes === undefined) return moment(date)\n\n    return moment\n      .utc(date)\n      .subtract(this.props.timeZoneOffsetInMinutes, 'minutes')\n  }\n\n  _toIsoWithTimeZoneOffset = date => {\n    if (this.props.timeZoneOffsetInMinutes === undefined)\n      return moment(date).toISOString()\n\n    return moment\n      .utc(date)\n      .add(this.props.timeZoneOffsetInMinutes, 'minutes')\n      .toISOString()\n  }\n}\n\nexport default DatePickerAndroid\n"]},"metadata":{},"sourceType":"module"}